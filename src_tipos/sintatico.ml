type token =
  | Int of (int)
  | Float of (float)
  | Bool of (bool)
  | Id of (string)
  | String of (string)
  | Linha of (int * int * token list)
  | Indenta
  | Dedenta
  | NovaLinha
  | Pto
  | PtVirg
  | Def
  | Is
  | From
  | Return
  | Seta
  | True
  | False
  | AParen
  | FParen
  | ACol
  | FCol
  | ACha
  | FCha
  | If
  | Else
  | While
  | DoisPontos
  | For
  | In
  | Range
  | Virg
  | Not
  | And
  | Or
  | Atrib
  | OpSoma
  | OpSub
  | Mult
  | Div
  | Modulo
  | Pot
  | Maior
  | Menor
  | Igual
  | Diferente
  | MaiorIgual
  | MenorIgual
  | AtribMais
  | AtribMenos
  | AtribVezes
  | AtribDiv
  | AtribMod
  | EOF
  | Print
  | Input
  | IntParse
  | TIPOVoid
  | TIPOInt
  | TIPOFloat
  | TIPOString
  | TIPOBool

open Parsing;;
let _ = parse_error;;
# 2 "sintatico.mly"
  open ArvSint;;

(* Cria uma expressao onde v é o valor da expressão e o é a ordem na regra gramatical *)
  let cria_exp o v =
    { valor = v;
      tipo = TGen;
      pos = Posicao.pos(o) }
  
(* Cria um comando onde c é o comando e o é a ordem na regra gramatical *)
  let cria_cmd o c =
    { vcmd = c;
      pcmd = Posicao.pos(o) }  

(* Cria um programa onde f sao as funcoes e c os comandos fora das funcoes *)
  let cria_programa f c =
    { funcsP = f;
      cmdsP = c } 

(* Cria uma funcao onde o é a ordem na regra gramatical, i é o nome da funcao, 
	p sao os parametros, t é o tipo de retorno e c sao os comandos dentro da funcao.*)
  let cria_funcao o i p t c =
    { idF = i;
      paramsF = p;
      cmdsF = c;
		returnF = t;
      (*match t with
			TIPOString -> returnF <- TString
      	| TIPOFloat -> returnF <- TFloat
      	| TIPOInt -> returnF <- TInt
      	| TIPOBool -> returnF <- TBool
      	| TIPOVoid -> returnF <- TVoid
      	| _ -> failwith "Tipo invalido na funcao "^idF*)
      posF = Posicao.pos(o);
      varLocaisF = Hashtbl.create 20 }      

(* Cria um parametro onde o é a ordem na regra gramatical e i o nome (id) do parametro.
	O tipo do parametro inicia como TGen *)
  let cria_parametro o i tipo =
    { idP = i;
		tipoP = tipo;
      (*match tipo with
      	TIPOString -> tipoP = TString
      	| TIPOFloat -> tipoP = TFloat
      	| TIPOInt -> tipoP = TInt
      	| TIPOBool -> tipoP = TBool
      	| _ -> failwith "Erro de tipos no parametro nao permitido"^idP*)
      posP = Posicao.pos(o)} 

# 117 "sintatico.ml"
let yytransl_const = [|
  263 (* Indenta *);
  264 (* Dedenta *);
  265 (* NovaLinha *);
  266 (* Pto *);
  267 (* PtVirg *);
  268 (* Def *);
  269 (* Is *);
  270 (* From *);
  271 (* Return *);
  272 (* Seta *);
  273 (* True *);
  274 (* False *);
  275 (* AParen *);
  276 (* FParen *);
  277 (* ACol *);
  278 (* FCol *);
  279 (* ACha *);
  280 (* FCha *);
  281 (* If *);
  282 (* Else *);
  283 (* While *);
  284 (* DoisPontos *);
  285 (* For *);
  286 (* In *);
  287 (* Range *);
  288 (* Virg *);
  289 (* Not *);
  290 (* And *);
  291 (* Or *);
  292 (* Atrib *);
  293 (* OpSoma *);
  294 (* OpSub *);
  295 (* Mult *);
  296 (* Div *);
  297 (* Modulo *);
  298 (* Pot *);
  299 (* Maior *);
  300 (* Menor *);
  301 (* Igual *);
  302 (* Diferente *);
  303 (* MaiorIgual *);
  304 (* MenorIgual *);
  305 (* AtribMais *);
  306 (* AtribMenos *);
  307 (* AtribVezes *);
  308 (* AtribDiv *);
  309 (* AtribMod *);
    0 (* EOF *);
  310 (* Print *);
  311 (* Input *);
  312 (* IntParse *);
  313 (* TIPOVoid *);
  314 (* TIPOInt *);
  315 (* TIPOFloat *);
  316 (* TIPOString *);
  317 (* TIPOBool *);
    0|]

let yytransl_block = [|
  257 (* Int *);
  258 (* Float *);
  259 (* Bool *);
  260 (* Id *);
  261 (* String *);
  262 (* Linha *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\005\000\005\000\007\000\007\000\
\006\000\006\000\006\000\006\000\006\000\008\000\008\000\009\000\
\009\000\011\000\011\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\003\000\003\000\029\000\
\027\000\028\000\026\000\013\000\015\000\014\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\010\000\010\000\010\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\031\000\031\000\031\000\032\000\032\000\
\032\000\033\000\033\000\034\000\034\000\034\000\035\000\035\000\
\035\000\035\000\036\000\000\000"

let yylen = "\002\000\
\003\000\000\000\002\000\012\000\000\000\002\000\004\000\003\000\
\001\000\001\000\001\000\001\000\001\000\000\000\002\000\002\000\
\001\000\005\000\007\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\000\000\002\000\007\000\
\005\000\007\000\003\000\004\000\007\000\013\000\007\000\009\000\
\004\000\006\000\008\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\001\000\003\000\003\000\001\000\003\000\003\000\
\001\000\002\000\001\000\001\000\001\000\003\000\001\000\001\000\
\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\084\000\000\000\000\000\000\000\003\000\000\000\
\079\000\080\000\082\000\000\000\081\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\033\000\
\039\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\034\000\035\000\
\036\000\037\000\000\000\000\000\000\000\073\000\075\000\076\000\
\077\000\005\000\014\000\083\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\071\000\072\000\000\000\000\000\
\006\000\000\000\015\000\000\000\000\000\000\000\000\000\049\000\
\000\000\000\000\014\000\000\000\000\000\044\000\000\000\000\000\
\018\000\016\000\038\000\038\000\000\000\000\000\041\000\000\000\
\000\000\000\000\013\000\010\000\011\000\009\000\012\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\047\000\038\000\000\000\019\000\
\042\000\040\000\000\000\000\000\000\000\051\000\038\000\000\000\
\048\000\000\000\000\000\004\000\038\000\000\000\046\000"

let yydgoto = "\002\000\
\003\000\004\000\006\000\007\000\080\000\144\000\113\000\081\000\
\115\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000"

let yysindex = "\002\000\
\000\000\000\000\000\000\017\255\001\255\209\003\000\000\004\255\
\000\000\000\000\000\000\023\255\000\000\035\255\035\255\035\255\
\035\255\035\255\054\255\035\255\000\000\064\255\255\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\197\255\034\255\012\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\247\254\030\255\062\255\105\255\
\101\255\032\255\000\000\035\255\035\255\035\255\011\255\035\255\
\035\255\035\255\035\255\035\255\035\255\035\255\035\255\035\255\
\035\255\035\255\035\255\035\255\035\255\035\255\035\255\002\255\
\248\255\000\000\000\000\095\255\097\255\185\255\014\255\060\255\
\197\255\197\255\073\255\081\255\094\255\249\254\124\255\124\255\
\124\255\124\255\124\255\034\255\034\255\034\255\034\255\034\255\
\034\255\034\255\012\255\012\255\000\000\000\000\087\255\103\255\
\000\000\121\255\000\000\140\255\125\255\134\255\117\255\000\000\
\148\255\142\255\000\000\035\255\035\255\000\000\238\001\238\001\
\000\000\000\000\000\000\000\000\157\255\049\255\000\000\232\002\
\091\255\127\255\000\000\000\000\000\000\000\000\000\000\136\255\
\154\255\016\255\074\255\163\255\000\000\175\255\171\255\184\255\
\187\255\000\000\188\255\168\255\000\000\000\000\178\255\000\000\
\000\000\000\000\192\255\173\255\083\255\000\000\000\000\193\255\
\000\000\119\255\196\255\000\000\000\000\152\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\214\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\235\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\083\002\163\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\137\002\191\002\186\255\000\000\000\000\000\000\245\002\036\003\
\069\003\105\003\143\003\217\000\015\001\069\001\123\001\177\001\
\231\001\029\002\055\000\109\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\176\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\011\000\000\000\000\000\077\000\000\000\084\000\
\000\000\249\255\000\000\122\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\103\000\051\003\115\000\
\240\255\000\000\000\000\000\000"

let yytablesize = 1332
let yytable = "\082\000\
\070\000\126\000\001\000\059\000\008\000\111\000\053\000\054\000\
\055\000\056\000\057\000\009\000\010\000\011\000\091\000\013\000\
\009\000\010\000\011\000\012\000\013\000\112\000\050\000\156\000\
\061\000\062\000\061\000\062\000\005\000\015\000\014\000\008\000\
\087\000\120\000\015\000\009\000\010\000\011\000\052\000\013\000\
\016\000\051\000\017\000\020\000\018\000\121\000\019\000\008\000\
\020\000\083\000\078\000\079\000\088\000\015\000\068\000\094\000\
\095\000\096\000\097\000\098\000\099\000\109\000\110\000\061\000\
\062\000\092\000\093\000\020\000\149\000\022\000\076\000\077\000\
\058\000\116\000\009\000\010\000\011\000\012\000\013\000\122\000\
\150\000\157\000\060\000\009\000\010\000\011\000\012\000\013\000\
\014\000\084\000\169\000\123\000\015\000\061\000\062\000\061\000\
\062\000\014\000\016\000\124\000\017\000\015\000\018\000\117\000\
\019\000\118\000\020\000\016\000\069\000\017\000\152\000\018\000\
\125\000\019\000\127\000\020\000\137\000\138\000\128\000\009\000\
\010\000\011\000\012\000\013\000\061\000\062\000\172\000\022\000\
\116\000\129\000\086\000\131\000\085\000\014\000\061\000\062\000\
\022\000\015\000\061\000\062\000\132\000\146\000\147\000\016\000\
\133\000\017\000\153\000\018\000\134\000\019\000\135\000\020\000\
\009\000\010\000\011\000\012\000\013\000\061\000\062\000\175\000\
\061\000\062\000\067\000\089\000\090\000\148\000\014\000\154\000\
\165\000\158\000\015\000\130\000\022\000\061\000\062\000\159\000\
\016\000\170\000\017\000\160\000\018\000\155\000\019\000\174\000\
\020\000\009\000\010\000\011\000\012\000\013\000\107\000\108\000\
\161\000\164\000\083\000\162\000\163\000\166\000\167\000\014\000\
\168\000\171\000\173\000\015\000\145\000\022\000\136\000\119\000\
\000\000\016\000\000\000\017\000\000\000\018\000\000\000\019\000\
\066\000\020\000\000\000\083\000\083\000\000\000\083\000\083\000\
\083\000\083\000\083\000\000\000\083\000\083\000\083\000\083\000\
\083\000\083\000\000\000\000\000\000\000\069\000\022\000\070\000\
\071\000\072\000\073\000\074\000\075\000\000\000\000\000\000\000\
\009\000\010\000\011\000\052\000\013\000\000\000\000\000\000\000\
\000\000\070\000\070\000\070\000\070\000\070\000\000\000\000\000\
\070\000\070\000\015\000\114\000\000\000\000\000\060\000\070\000\
\000\000\000\000\000\000\070\000\070\000\000\000\000\000\000\000\
\020\000\070\000\000\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\000\000\
\000\000\070\000\000\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\068\000\
\068\000\068\000\068\000\068\000\000\000\000\000\068\000\068\000\
\000\000\000\000\000\000\000\000\061\000\068\000\000\000\000\000\
\000\000\068\000\068\000\000\000\000\000\000\000\000\000\068\000\
\000\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\000\000\000\000\068\000\
\000\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\069\000\069\000\069\000\
\069\000\069\000\000\000\000\000\069\000\069\000\000\000\000\000\
\000\000\000\000\062\000\069\000\000\000\000\000\000\000\069\000\
\069\000\000\000\000\000\000\000\000\000\069\000\000\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\000\000\000\000\069\000\000\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\067\000\067\000\067\000\067\000\067\000\
\000\000\000\000\067\000\067\000\000\000\000\000\000\000\000\000\
\063\000\067\000\000\000\000\000\000\000\067\000\067\000\000\000\
\000\000\000\000\000\000\067\000\000\000\067\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\067\000\000\000\
\000\000\000\000\000\000\067\000\000\000\067\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\066\000\066\000\066\000\066\000\066\000\000\000\000\000\
\066\000\066\000\000\000\000\000\000\000\000\000\064\000\066\000\
\000\000\000\000\000\000\066\000\066\000\000\000\000\000\000\000\
\000\000\066\000\000\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\000\000\000\000\000\000\
\000\000\066\000\000\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\060\000\
\060\000\060\000\060\000\060\000\000\000\000\000\060\000\060\000\
\000\000\000\000\000\000\000\000\065\000\060\000\000\000\000\000\
\000\000\060\000\060\000\000\000\000\000\000\000\000\000\060\000\
\000\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\000\000\000\000\000\000\000\000\060\000\
\000\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\061\000\061\000\061\000\
\061\000\061\000\000\000\000\000\061\000\061\000\000\000\000\000\
\000\000\000\000\059\000\061\000\000\000\000\000\000\000\061\000\
\061\000\000\000\000\000\000\000\000\000\061\000\000\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\000\000\000\000\000\000\000\000\061\000\000\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\062\000\062\000\062\000\062\000\062\000\
\000\000\000\000\062\000\062\000\000\000\000\000\000\000\000\000\
\057\000\062\000\000\000\000\000\000\000\062\000\062\000\000\000\
\000\000\000\000\000\000\062\000\000\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\000\000\
\000\000\000\000\000\000\062\000\000\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\063\000\063\000\063\000\063\000\063\000\000\000\000\000\
\063\000\063\000\000\000\000\000\000\000\000\000\058\000\063\000\
\000\000\000\000\000\000\063\000\063\000\000\000\000\000\000\000\
\000\000\063\000\000\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\000\000\000\000\000\000\
\000\000\063\000\000\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\064\000\
\064\000\064\000\064\000\064\000\000\000\000\000\064\000\064\000\
\000\000\000\000\000\000\000\000\052\000\064\000\000\000\000\000\
\000\000\064\000\064\000\000\000\000\000\000\000\000\000\064\000\
\000\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\000\000\000\000\000\000\000\000\064\000\
\000\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\065\000\065\000\065\000\
\065\000\065\000\000\000\053\000\065\000\065\000\139\000\140\000\
\141\000\142\000\143\000\065\000\000\000\000\000\000\000\065\000\
\065\000\000\000\000\000\000\000\000\000\065\000\000\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\000\000\000\000\000\000\054\000\065\000\000\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\059\000\059\000\059\000\059\000\059\000\
\000\000\000\000\059\000\059\000\000\000\000\000\000\000\000\000\
\000\000\059\000\000\000\000\000\000\000\059\000\059\000\000\000\
\055\000\000\000\000\000\059\000\000\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\100\000\
\101\000\102\000\103\000\104\000\105\000\106\000\000\000\000\000\
\000\000\000\000\000\000\059\000\059\000\059\000\059\000\059\000\
\059\000\057\000\057\000\057\000\057\000\057\000\056\000\000\000\
\057\000\057\000\000\000\000\000\000\000\000\000\000\000\057\000\
\000\000\000\000\000\000\057\000\057\000\000\000\000\000\000\000\
\000\000\057\000\000\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\000\000\000\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\057\000\057\000\057\000\057\000\057\000\058\000\
\058\000\058\000\058\000\058\000\000\000\000\000\058\000\058\000\
\000\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
\021\000\058\000\058\000\000\000\000\000\038\000\000\000\058\000\
\000\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\000\000\000\000\000\000\000\000\000\000\
\009\000\010\000\011\000\052\000\013\000\000\000\000\000\058\000\
\058\000\058\000\058\000\058\000\058\000\052\000\052\000\052\000\
\052\000\052\000\015\000\151\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\000\000\000\000\052\000\
\020\000\000\000\000\000\000\000\000\000\052\000\000\000\052\000\
\052\000\052\000\000\000\052\000\000\000\052\000\000\000\000\000\
\000\000\000\000\017\000\017\000\017\000\017\000\017\000\000\000\
\000\000\000\000\000\000\000\000\053\000\053\000\053\000\053\000\
\053\000\000\000\052\000\053\000\017\000\017\000\000\000\000\000\
\000\000\000\000\053\000\000\000\000\000\000\000\053\000\000\000\
\000\000\000\000\017\000\000\000\053\000\000\000\053\000\053\000\
\053\000\000\000\053\000\000\000\053\000\054\000\054\000\054\000\
\054\000\054\000\000\000\000\000\054\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000\000\000\000\000\000\000\054\000\
\000\000\053\000\000\000\000\000\000\000\054\000\000\000\054\000\
\054\000\054\000\000\000\054\000\000\000\054\000\000\000\000\000\
\000\000\055\000\055\000\055\000\055\000\055\000\000\000\000\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\000\000\000\000\054\000\055\000\000\000\000\000\000\000\000\000\
\000\000\055\000\000\000\055\000\055\000\055\000\000\000\055\000\
\000\000\055\000\000\000\000\000\000\000\000\000\000\000\056\000\
\056\000\056\000\056\000\056\000\000\000\000\000\056\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\000\055\000\000\000\
\000\000\056\000\000\000\000\000\000\000\000\000\000\000\056\000\
\000\000\056\000\056\000\056\000\000\000\056\000\000\000\056\000\
\045\000\045\000\045\000\045\000\045\000\000\000\000\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\000\000\
\000\000\000\000\045\000\000\000\056\000\000\000\000\000\000\000\
\045\000\000\000\045\000\045\000\045\000\000\000\045\000\000\000\
\045\000\009\000\010\000\011\000\012\000\013\000\038\000\038\000\
\038\000\038\000\038\000\000\000\000\000\000\000\000\000\014\000\
\000\000\000\000\000\000\015\000\038\000\045\000\000\000\000\000\
\038\000\016\000\000\000\017\000\000\000\018\000\038\000\019\000\
\038\000\020\000\038\000\000\000\038\000\000\000\038\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\000\000\038\000\083\000\083\000\083\000\083\000\
\083\000\083\000\083\000\083\000\000\000\083\000\083\000\083\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
\061\000\062\000\063\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\065\000\066\000\067\000\068\000"

let yycheck = "\009\001\
\000\000\009\001\001\000\020\000\004\001\004\001\014\000\015\000\
\016\000\017\000\018\000\001\001\002\001\003\001\004\001\005\001\
\001\001\002\001\003\001\004\001\005\001\020\001\019\001\008\001\
\034\001\035\001\034\001\035\001\012\001\019\001\015\001\004\001\
\001\001\020\001\019\001\001\001\002\001\003\001\004\001\005\001\
\025\001\019\001\027\001\033\001\029\001\032\001\031\001\020\001\
\033\001\020\001\039\001\040\001\060\000\019\001\000\000\063\000\
\064\000\065\000\066\000\067\000\068\000\078\000\079\000\034\001\
\035\001\055\001\056\001\033\001\020\001\054\001\037\001\038\001\
\019\001\081\000\001\001\002\001\003\001\004\001\005\001\020\001\
\032\001\008\001\019\001\001\001\002\001\003\001\004\001\005\001\
\015\001\028\001\008\001\019\001\019\001\034\001\035\001\034\001\
\035\001\015\001\025\001\019\001\027\001\019\001\029\001\009\001\
\031\001\009\001\033\001\025\001\000\000\027\001\020\001\029\001\
\019\001\031\001\028\001\033\001\124\000\125\000\016\001\001\001\
\002\001\003\001\004\001\005\001\034\001\035\001\008\001\054\001\
\136\000\009\001\030\001\007\001\028\001\015\001\034\001\035\001\
\054\001\019\001\034\001\035\001\007\001\131\000\132\000\025\001\
\028\001\027\001\020\001\029\001\001\001\031\001\009\001\033\001\
\001\001\002\001\003\001\004\001\005\001\034\001\035\001\008\001\
\034\001\035\001\000\000\061\000\062\000\009\001\015\001\032\001\
\158\000\007\001\019\001\032\001\054\001\034\001\035\001\001\001\
\025\001\167\000\027\001\009\001\029\001\028\001\031\001\173\000\
\033\001\001\001\002\001\003\001\004\001\005\001\076\000\077\000\
\009\001\026\001\009\001\009\001\009\001\020\001\007\001\015\001\
\028\001\009\001\007\001\019\001\128\000\054\001\123\000\086\000\
\255\255\025\001\255\255\027\001\255\255\029\001\255\255\031\001\
\000\000\033\001\255\255\034\001\035\001\255\255\037\001\038\001\
\039\001\040\001\041\001\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\255\255\255\255\255\255\041\001\054\001\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\019\001\020\001\255\255\255\255\000\000\015\001\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\255\255\
\033\001\025\001\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\255\255\
\255\255\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\000\000\015\001\255\255\255\255\
\255\255\019\001\020\001\255\255\255\255\255\255\255\255\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\255\255\255\255\041\001\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\000\000\015\001\255\255\255\255\255\255\019\001\
\020\001\255\255\255\255\255\255\255\255\025\001\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\255\255\255\255\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\000\000\015\001\255\255\255\255\255\255\019\001\020\001\255\255\
\255\255\255\255\255\255\025\001\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\255\255\
\255\255\255\255\255\255\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\000\000\015\001\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\255\255\
\255\255\025\001\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\255\255\255\255\255\255\
\255\255\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\000\000\015\001\255\255\255\255\
\255\255\019\001\020\001\255\255\255\255\255\255\255\255\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\255\255\255\255\255\255\255\255\041\001\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\000\000\015\001\255\255\255\255\255\255\019\001\
\020\001\255\255\255\255\255\255\255\255\025\001\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\255\255\255\255\255\255\255\255\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\000\000\015\001\255\255\255\255\255\255\019\001\020\001\255\255\
\255\255\255\255\255\255\025\001\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\255\255\
\255\255\255\255\255\255\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\000\000\015\001\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\255\255\
\255\255\025\001\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\255\255\255\255\255\255\
\255\255\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\000\000\015\001\255\255\255\255\
\255\255\019\001\020\001\255\255\255\255\255\255\255\255\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\255\255\255\255\255\255\255\255\041\001\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\000\000\008\001\009\001\057\001\058\001\
\059\001\060\001\061\001\015\001\255\255\255\255\255\255\019\001\
\020\001\255\255\255\255\255\255\255\255\025\001\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\255\255\255\255\255\255\000\000\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\015\001\255\255\255\255\255\255\019\001\020\001\255\255\
\000\000\255\255\255\255\025\001\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\255\255\255\255\
\255\255\255\255\255\255\049\001\050\001\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\000\000\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\255\255\015\001\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\255\255\
\255\255\025\001\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\015\001\255\255\255\255\
\000\000\019\001\020\001\255\255\255\255\000\000\255\255\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\049\001\
\050\001\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\019\001\020\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\255\255\255\255\255\255\019\001\
\033\001\255\255\255\255\255\255\255\255\025\001\255\255\027\001\
\028\001\029\001\255\255\031\001\255\255\033\001\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\255\255\054\001\008\001\019\001\020\001\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\019\001\255\255\
\255\255\255\255\033\001\255\255\025\001\255\255\027\001\028\001\
\029\001\255\255\031\001\255\255\033\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\255\255\255\255\255\255\019\001\
\255\255\054\001\255\255\255\255\255\255\025\001\255\255\027\001\
\028\001\029\001\255\255\031\001\255\255\033\001\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\255\255\255\255\054\001\019\001\255\255\255\255\255\255\255\255\
\255\255\025\001\255\255\027\001\028\001\029\001\255\255\031\001\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\054\001\255\255\
\255\255\019\001\255\255\255\255\255\255\255\255\255\255\025\001\
\255\255\027\001\028\001\029\001\255\255\031\001\255\255\033\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\015\001\255\255\
\255\255\255\255\019\001\255\255\054\001\255\255\255\255\255\255\
\025\001\255\255\027\001\028\001\029\001\255\255\031\001\255\255\
\033\001\001\001\002\001\003\001\004\001\005\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\015\001\
\255\255\255\255\255\255\019\001\015\001\054\001\255\255\255\255\
\019\001\025\001\255\255\027\001\255\255\029\001\025\001\031\001\
\027\001\033\001\029\001\255\255\031\001\255\255\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\054\001\255\255\
\255\255\255\255\255\255\054\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\034\001\035\001\036\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\050\001\051\001\052\001\053\001"

let yynames_const = "\
  Indenta\000\
  Dedenta\000\
  NovaLinha\000\
  Pto\000\
  PtVirg\000\
  Def\000\
  Is\000\
  From\000\
  Return\000\
  Seta\000\
  True\000\
  False\000\
  AParen\000\
  FParen\000\
  ACol\000\
  FCol\000\
  ACha\000\
  FCha\000\
  If\000\
  Else\000\
  While\000\
  DoisPontos\000\
  For\000\
  In\000\
  Range\000\
  Virg\000\
  Not\000\
  And\000\
  Or\000\
  Atrib\000\
  OpSoma\000\
  OpSub\000\
  Mult\000\
  Div\000\
  Modulo\000\
  Pot\000\
  Maior\000\
  Menor\000\
  Igual\000\
  Diferente\000\
  MaiorIgual\000\
  MenorIgual\000\
  AtribMais\000\
  AtribMenos\000\
  AtribVezes\000\
  AtribDiv\000\
  AtribMod\000\
  EOF\000\
  Print\000\
  Input\000\
  IntParse\000\
  TIPOVoid\000\
  TIPOInt\000\
  TIPOFloat\000\
  TIPOString\000\
  TIPOBool\000\
  "

let yynames_block = "\
  Int\000\
  Float\000\
  Bool\000\
  Id\000\
  String\000\
  Linha\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'funcoes) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    Obj.repr(
# 83 "sintatico.mly"
                              ( cria_programa _1 _2 )
# 713 "sintatico.ml"
               : ArvSint.programa))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "sintatico.mly"
         ( [] )
# 719 "sintatico.ml"
               : 'funcoes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'funcoes) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funcao) in
    Obj.repr(
# 87 "sintatico.mly"
                          ( _1 @ [ _2 ] )
# 727 "sintatico.ml"
               : 'funcoes))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'parametros) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'tipo) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    Obj.repr(
# 92 "sintatico.mly"
                                 ( cria_funcao 1 _2 _4 _7 _11 )
# 737 "sintatico.ml"
               : 'funcao))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "sintatico.mly"
            ( [] )
# 743 "sintatico.ml"
               : 'parametros))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'parametros) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'parametro) in
    Obj.repr(
# 96 "sintatico.mly"
                         ( _1 @ [ _2 ] )
# 751 "sintatico.ml"
               : 'parametros))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tipo) in
    Obj.repr(
# 100 "sintatico.mly"
                                   ( cria_parametro 1 _1 _3)
# 759 "sintatico.ml"
               : 'parametro))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tipo) in
    Obj.repr(
# 101 "sintatico.mly"
                          ( cria_parametro 1 _1 _3)
# 767 "sintatico.ml"
               : 'parametro))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "sintatico.mly"
            (TString)
# 773 "sintatico.ml"
               : 'tipo))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "sintatico.mly"
           (TInt)
# 779 "sintatico.ml"
               : 'tipo))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "sintatico.mly"
             (TFloat)
# 785 "sintatico.ml"
               : 'tipo))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "sintatico.mly"
            (TBool)
# 791 "sintatico.ml"
               : 'tipo))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "sintatico.mly"
            (TVoid)
# 797 "sintatico.ml"
               : 'tipo))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "sintatico.mly"
            ( [] )
# 803 "sintatico.ml"
               : 'argumentos))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'argumentos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'argumento) in
    Obj.repr(
# 113 "sintatico.mly"
                         ( _1 @ [ _2 ] )
# 811 "sintatico.ml"
               : 'argumentos))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expressao) in
    Obj.repr(
# 119 "sintatico.mly"
                          ( cria_exp 2 _1.valor)
# 818 "sintatico.ml"
               : 'argumento))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expressao) in
    Obj.repr(
# 120 "sintatico.mly"
                ( cria_exp 2 _1.valor )
# 825 "sintatico.ml"
               : 'argumento))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'argumentos) in
    Obj.repr(
# 124 "sintatico.mly"
                                                        ( cria_cmd 1 (ChamaFuncaoVoid (_1, _3)))
# 833 "sintatico.ml"
               : 'cmd_chamada_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'argumentos) in
    Obj.repr(
# 125 "sintatico.mly"
                                                                      ( cria_cmd 1 (ChamaFuncaoAtrib (_1, _3, _5)))
# 842 "sintatico.ml"
               : 'cmd_chamada_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_atrib) in
    Obj.repr(
# 128 "sintatico.mly"
                    ( _1 )
# 849 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_if_else) in
    Obj.repr(
# 129 "sintatico.mly"
                ( _1 )
# 856 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_if) in
    Obj.repr(
# 130 "sintatico.mly"
           ( _1 )
# 863 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_while) in
    Obj.repr(
# 131 "sintatico.mly"
              ( _1 )
# 870 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_for) in
    Obj.repr(
# 132 "sintatico.mly"
            ( _1 )
# 877 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_range1) in
    Obj.repr(
# 133 "sintatico.mly"
               ( _1 )
# 884 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_range2) in
    Obj.repr(
# 134 "sintatico.mly"
               ( _1 )
# 891 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_range3) in
    Obj.repr(
# 135 "sintatico.mly"
               ( _1 )
# 898 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_atribMAIS) in
    Obj.repr(
# 136 "sintatico.mly"
                  ( _1 )
# 905 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_atribMENOS) in
    Obj.repr(
# 137 "sintatico.mly"
                   ( _1 )
# 912 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_atribVEZES) in
    Obj.repr(
# 138 "sintatico.mly"
                   ( _1 )
# 919 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_atribDIV) in
    Obj.repr(
# 139 "sintatico.mly"
                 ( _1 )
# 926 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_atribMOD) in
    Obj.repr(
# 140 "sintatico.mly"
                 ( _1 )
# 933 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_chamada_func) in
    Obj.repr(
# 141 "sintatico.mly"
                     ( _1 )
# 940 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_retorno) in
    Obj.repr(
# 142 "sintatico.mly"
                ( _1 )
# 947 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_print) in
    Obj.repr(
# 143 "sintatico.mly"
              ( _1 )
# 954 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_input) in
    Obj.repr(
# 144 "sintatico.mly"
              ( _1 )
# 961 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_int_parse) in
    Obj.repr(
# 145 "sintatico.mly"
                  ( _1 )
# 968 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "sintatico.mly"
          ( [] )
# 974 "sintatico.ml"
               : 'comandos))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comando) in
    Obj.repr(
# 150 "sintatico.mly"
                         ( _1 @ [ _2 ] )
# 982 "sintatico.ml"
               : 'comandos))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expressao) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    Obj.repr(
# 154 "sintatico.mly"
 ( cria_cmd 1 ( CmdIntParse ( _1, _5 )))
# 990 "sintatico.ml"
               : 'cmd_int_parse))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    Obj.repr(
# 157 "sintatico.mly"
    ( cria_cmd 1 ( CmdPrint( _3 ) ))
# 997 "sintatico.ml"
               : 'cmd_print))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expressao) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    Obj.repr(
# 160 "sintatico.mly"
 ( cria_cmd 1 ( CmdInput ( _1, _5 ) ))
# 1005 "sintatico.ml"
               : 'cmd_input))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expressao) in
    Obj.repr(
# 163 "sintatico.mly"
 ( cria_cmd 1 ( CmdReturn ( _2 ) ) )
# 1012 "sintatico.ml"
               : 'cmd_retorno))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expressao) in
    Obj.repr(
# 166 "sintatico.mly"
 ( cria_cmd 2 ( CmdAtrib ( _1, _3 ) ) )
# 1020 "sintatico.ml"
               : 'cmd_atrib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expressao) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    Obj.repr(
# 169 "sintatico.mly"
 ( cria_cmd 1 ( CmdIf ( _2, _6, None ) ) )
# 1028 "sintatico.ml"
               : 'cmd_if))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : 'expressao) in
    let _6 = (Parsing.peek_val __caml_parser_env 7 : 'comandos) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    Obj.repr(
# 173 "sintatico.mly"
 ( cria_cmd 1 ( CmdIf ( _2, _6, Some( _12 ) ) ) )
# 1037 "sintatico.ml"
               : 'cmd_if_else))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expressao) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    Obj.repr(
# 176 "sintatico.mly"
 ( cria_cmd 1 ( CmdWhile ( _2, _6 ) ) )
# 1045 "sintatico.ml"
               : 'cmd_while))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'expressao) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'comando) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    Obj.repr(
# 179 "sintatico.mly"
 ( cria_cmd 1 ( CmdFor ( _2, _4, _8 ) ) )
# 1054 "sintatico.ml"
               : 'cmd_for))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 184 "sintatico.mly"
 ( cria_cmd 1 ( CmdRange ( 0, _3, 1 ) ) )
# 1061 "sintatico.ml"
               : 'cmd_range1))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 188 "sintatico.mly"
 ( cria_cmd 1 ( CmdRange ( _3, _5, 1) ) )
# 1069 "sintatico.ml"
               : 'cmd_range2))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 192 "sintatico.mly"
 ( cria_cmd 1 ( CmdRange ( _3, _5, _7 ) ) )
# 1078 "sintatico.ml"
               : 'cmd_range3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressao) in
    Obj.repr(
# 196 "sintatico.mly"
 ( let exp = cria_exp 2 ( ExpBin ( Mais, _1, _3 ) ) in
    	      cria_cmd 2 ( CmdAtrib( _1, exp ) ) )
# 1087 "sintatico.ml"
               : 'cmd_atribMAIS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressao) in
    Obj.repr(
# 200 "sintatico.mly"
 ( let exp = cria_exp 2 ( ExpBin ( Menos, _1, _3 ) ) in
    		    cria_cmd 2 ( CmdAtrib ( _1, exp ) ) )
# 1096 "sintatico.ml"
               : 'cmd_atribMENOS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressao) in
    Obj.repr(
# 204 "sintatico.mly"
 ( let exp = cria_exp 2 ( ExpBin ( Mult, _1, _3 ) ) in
				cria_cmd 2 ( CmdAtrib ( _1, exp ) ) )
# 1105 "sintatico.ml"
               : 'cmd_atribVEZES))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressao) in
    Obj.repr(
# 208 "sintatico.mly"
 ( let exp = cria_exp 2 ( ExpBin ( Div, _1, _3 ) ) in
   				cria_cmd 2 ( CmdAtrib( _1, exp ) ) )
# 1114 "sintatico.ml"
               : 'cmd_atribDIV))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressao) in
    Obj.repr(
# 212 "sintatico.mly"
 ( let exp = cria_exp 2 ( ExpBin ( Modulo, _1, _3 ) ) in
    			cria_cmd 2 ( CmdAtrib( _1, exp ) ) )
# 1123 "sintatico.ml"
               : 'cmd_atribMOD))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 217 "sintatico.mly"
                                (cria_exp 5 (ExpBin (And, _1, _3)))
# 1131 "sintatico.ml"
               : 'expressao))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 218 "sintatico.mly"
                       (cria_exp 5 (ExpBin (Or, _1, _3)))
# 1139 "sintatico.ml"
               : 'expressao))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 219 "sintatico.mly"
           (_1)
# 1146 "sintatico.ml"
               : 'expressao))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 222 "sintatico.mly"
                          ( cria_exp 4 ( ExpBin ( Maior, _1, _3 ) ) )
# 1154 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 223 "sintatico.mly"
                      ( cria_exp 4 ( ExpBin ( Menor, _1, _3 ) ) )
# 1162 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 224 "sintatico.mly"
                      ( cria_exp 4 ( ExpBin ( Igual, _1, _3 ) ) )
# 1170 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 225 "sintatico.mly"
                          ( cria_exp 4 ( ExpBin ( Diferente, _1, _3 ) ) )
# 1178 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 226 "sintatico.mly"
                           ( cria_exp 4 ( ExpBin ( MaiorIgual, _1, _3 ) ) )
# 1186 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 227 "sintatico.mly"
                           ( cria_exp 4 ( ExpBin ( MenorIgual, _1, _3 ) ) )
# 1194 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 228 "sintatico.mly"
                       ( cria_exp 4 ( ExpBin ( Modulo, _1, _3 ) ) )
# 1202 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 229 "sintatico.mly"
          ( _1 )
# 1209 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr3) in
    Obj.repr(
# 231 "sintatico.mly"
                           ( cria_exp 3 ( ExpBin ( Mais, _1, _3 ) ) )
# 1217 "sintatico.ml"
               : 'expr2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr3) in
    Obj.repr(
# 232 "sintatico.mly"
                        ( cria_exp 3 ( ExpBin ( Menos, _1, _3 ) ) )
# 1225 "sintatico.ml"
               : 'expr2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr3) in
    Obj.repr(
# 233 "sintatico.mly"
            ( _1 )
# 1232 "sintatico.ml"
               : 'expr2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr4) in
    Obj.repr(
# 236 "sintatico.mly"
                        ( cria_exp 2 ( ExpBin ( Mult, _1, _3 ) ) )
# 1240 "sintatico.ml"
               : 'expr3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr4) in
    Obj.repr(
# 237 "sintatico.mly"
                     ( cria_exp 2 ( ExpBin ( Div, _1, _3 ) ) )
# 1248 "sintatico.ml"
               : 'expr3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr4) in
    Obj.repr(
# 238 "sintatico.mly"
          ( _1 )
# 1255 "sintatico.ml"
               : 'expr3))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr4) in
    Obj.repr(
# 241 "sintatico.mly"
                 (cria_exp 1 (ExpUn(Not, _2)))
# 1262 "sintatico.ml"
               : 'expr4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr5) in
    Obj.repr(
# 242 "sintatico.mly"
          (_1)
# 1269 "sintatico.ml"
               : 'expr4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'operando) in
    Obj.repr(
# 245 "sintatico.mly"
                 ( cria_exp 0 _1 )
# 1276 "sintatico.ml"
               : 'expr5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variavel) in
    Obj.repr(
# 246 "sintatico.mly"
                 ( cria_exp 0 ( ExpVar _1 ) )
# 1283 "sintatico.ml"
               : 'expr5))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expressao) in
    Obj.repr(
# 247 "sintatico.mly"
                               ( _2 )
# 1290 "sintatico.ml"
               : 'expr5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 251 "sintatico.mly"
                ( ExpInt _1 )
# 1297 "sintatico.ml"
               : 'operando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 252 "sintatico.mly"
             ( ExpFloat _1 )
# 1304 "sintatico.ml"
               : 'operando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 253 "sintatico.mly"
              ( ExpString _1 )
# 1311 "sintatico.ml"
               : 'operando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 254 "sintatico.mly"
            ( ExpBool _1 )
# 1318 "sintatico.ml"
               : 'operando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 257 "sintatico.mly"
             ( VarSimples _1 )
# 1325 "sintatico.ml"
               : 'variavel))
(* Entry programa *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let programa (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : ArvSint.programa)
